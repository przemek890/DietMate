from typing import Generator
import groq
from pymongo import collection
from .main import handle_message


def stream_response(message: str, file_name: str, file_content: str, client: groq.Client, session_id: str, collectionGPT: collection.Collection) -> Generator[str, None, None]:
    """
    Generates a streaming response from the model by processing the incoming message
    and yielding chunks of the response. Each chunk is checked for security-related content.

    The function handles tokenized responses, yielding each chunk one at a time while ensuring
    the response does not exceed a defined token limit. If an illegal response (e.g., containing
    secret patterns) is detected, it immediately stops and yields an error message.

    :param message: The input message that will be sent to the model for processing.
    :param file_name: The name of the file to be processed, if provided.
    :param file_content: The content of the file to be processed, if provided.

    :yield: Chunks of the response generated by the model. If an error occurs or an illegal response is detected, an error message is yielded.
    """
    bot_response = ""
    token_queue = []
    TOKEN_LIMIT = 30

    try:
        for chunk in handle_message(message, file_name, file_content, client, session_id, collectionGPT):
            if not chunk:
                continue

            token_queue.append(chunk)

            if len(token_queue) > TOKEN_LIMIT:
                oldest_chunk = token_queue.pop(0)
                bot_response += oldest_chunk
                yield oldest_chunk

        while token_queue:
            remaining_chunk = token_queue.pop(0)
            bot_response += remaining_chunk
            yield remaining_chunk

    except Exception as e:
        yield f"***ERROR***: {str(e)}"